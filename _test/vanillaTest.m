

%( Generate data
characters = ['a':'z', 'A':'Z'];

startDateQ = qq(2020,1);
endDateQ = startDateQ + 15;
startDateM = convert(startDateQ, 12, "ConversionMonth", "First");
endDateM = convert(endDateQ, 12, "ConversionMonth", "Last");
rangeQ = startDateQ : endDateQ;
rangeM =  startDateM : endDateM ; 

numPeriodsQ = numel(rangeQ);
numPeriodsM = numel(rangeM);

allNames = string.empty(1, 0);
db = struct( );
for i = 1 : 50
    name = string(characters(randi(numel(characters), 1, 8)));
    data = rand(numPeriodsQ, 1);
    db.(name) = Series(startDateQ, data);
    allNames(end+1) = name;
end
%)




report = rephrase.Report( ...
    "Lorem ipsum dolor sit amet" ...
    , "Subtitle=", "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras id faucibus felis. Nunc vulputate orci nibh, in aliquam risus finibus viverra." ...
    , "Footer=", "Duis ut ultricies lorem. Nullam faucibus pulvinar massa vel faucibus." ...
    , "ChartLibrary=", "plotly" ... % chartjs
    , "InteractiveCharts=", true ... % make it `false` for huge reports
);

report ...
    < rephrase.Text.fromFile( ...
        "Text section with formulas" ...
        , "sample.md" ...
        , "ParseFormulas=", true ...
        , "HighlightCodeBlocks=", true ...
    );

table1 = rephrase.Table("Table 1", rangeQ, "DateFormat", "YYYY:Q", "NumDecimals", 3) ...
    < rephrase.Series("Inflation", db.(allNames(1))) ...
    < rephrase.Series("GDP Growth", db.(allNames(2))) ...
    < rephrase.Series("Policy Rate", db.(allNames(3))) ...
    < rephrase.Heading("Table Heading") ...
    < rephrase.Series("Very-long-long-unbreakable-series-title-and-even-longer", db.(allNames(4))) ...
    < rephrase.Series("Exchange Rate", db.(allNames(5)));

report < table1;


grid1 = rephrase.Grid("", 2, 2, "DateFormat=", "YYYY:Q", "DisplayTitle", false);

    highlight1 = rephrase.Highlight(-Inf, mm(2020, 12));
    highlight2 = rephrase.Highlight(mm(2022, 4), Inf, [100, 0, 200, 0.1]);

    chart1 = rephrase.Chart("Chart 1", startDateQ, endDateQ, "Highlight=", [highlight1, highlight2]) ...
        < rephrase.Series("Series 101", db.(allNames(6)), "Type=", "Bar") ...
        < rephrase.Series("Series 102", db.(allNames(7))) ...
    ;

    chart2 = rephrase.Chart("Chart 2", startDateQ, endDateQ, "ChartLibrary=", "chartjs") ...
        < rephrase.Series("Series 201", db.(allNames(7))) ...
        < rephrase.Series("Series 202", db.(allNames(8))) ...
    ;

    chart3 = rephrase.Chart("Chart 3", startDateQ, endDateQ) ...
        < rephrase.Series("Series 301", db.(allNames(9))) ...
        < rephrase.Series("Series 302", db.(allNames(10))) ...
    ;

    chart4 = rephrase.Chart("Chart 4", startDateQ, endDateQ, "DateFormat=", "MMM YYYY") ...
        < rephrase.Series("Series 401", db.(allNames(11)), "Color=", "#000") ...
        < rephrase.Series("Series 402", db.(allNames(12))) ...
    ;

report ...
    < rephrase.Pagebreak() ...
    < (grid1 < chart1 < chart2 < chart3 < chart4) ...
;

report < rephrase.Pagebreak( );

table2 = rephrase.Table( ...
    "Comparison Table", rangeQ ...
    , "DateFormat=", "YYYY:Q" ...
    , "NumDecimals=", 3 ...
    , "DisplayRows=", struct("Diff", true, "Baseline", true, "Alternative", true) ...
    , "RowTitles=", struct("Diff", "&Delta;") ...
);

table2 ...
        < rephrase.DiffSeries("Unemployment Rate", db.(allNames(13)), db.(allNames(14))) ...
        < rephrase.DiffSeries("Output Gap", db.(allNames(15)), db.(allNames(16))) ...
        < rephrase.DiffSeries("Financial Conditions", db.(allNames(17)), db.(allNames(18))) ...
        < rephrase.DiffSeries("Foreign Demand", allNames(19), allNames(20)) ...
        < rephrase.DiffSeries("Oil Prices", allNames(21), allNames(22)) ...
        < rephrase.DiffSeries("US Treasury Bill", allNames(23), allNames(24)) ...
;

report < table2;

show(report)

build(report, "../test1.html", db, "SaveJson", true);

